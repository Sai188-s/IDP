% Read the image
img = imread('sai.png');

% Convert the image to grayscale
grayImg = rgb2gray(img);

% Perform edge detection
edges = edge(grayImg, 'Canny');

% Use morphological operations to clean up the image
se = strel('disk', 2);
cleanImg = imclose(edges, se);
cleanImg = imopen(cleanImg, se);

% Find connected components (individual grains)
cc = bwconncomp(cleanImg);
grainStats = regionprops(cc, 'Area', 'Perimeter', 'Eccentricity', 'BoundingBox', 'MajorAxisLength', 'MinorAxisLength');

% Display the original image and the processed image
figure;
subplot(1, 2, 1);
imshow(img);
title('Original Image');
subplot(1, 2, 2);
imshow(cleanImg);
title('Processed Image');

% Initialize counters
totalGrains = cc.NumObjects;
impurities = 0;

% Analyze each grain
for i = 1:length(grainStats)
    % Extract properties
    area = grainStats(i).Area;
    perimeter = grainStats(i).Perimeter;
    eccentricity = grainStats(i).Eccentricity;
    boundingBox = grainStats(i).BoundingBox;
    majorAxisLength = grainStats(i).MajorAxisLength;
    minorAxisLength = grainStats(i).MinorAxisLength;
    
    % Calculate the roundness (circularity) of the grain
    roundness = (4 * pi * area) / (perimeter ^ 2);
    
    % Criteria for impurities (e.g., too small, irregular shape, etc.)
    if area < 50 || roundness < 0.5 || eccentricity > 0.8
        impurities = impurities + 1;
    end
    
    % Display shape and size information for each grain
    fprintf('Grain %d: Area = %.2f, Perimeter = %.2f, Eccentricity = %.2f\n', i, area, perimeter, eccentricity);
    fprintf('Grain %d: Major Axis Length = %.2f, Minor Axis Length = %.2f\n', i, majorAxisLength, minorAxisLength);
end

% Display results
fprintf('Total Grains: %d\n', totalGrains);
fprintf('Impurities: %d\n', impurities);
fprintf('Quality: %.2f%%\n', (1 - impurities / totalGrains) * 100);



















% Check if Deep Learning Toolbox is installed
if ~isdeployed && ~license('test', 'Neural_Network_Toolbox')
    error('Deep Learning Toolbox is not installed. Please install it to proceed.');
end

% Rice Grain Analysis
% Read the image
img = imread('sai.png');

% Convert the image to grayscale
grayImg = rgb2gray(img);

% Perform edge detection
edges = edge(grayImg, 'Canny');

% Use morphological operations to clean up the image
se = strel('disk', 2);
cleanImg = imclose(edges, se);
cleanImg = imopen(cleanImg, se);

% Find connected components (individual grains)
cc = bwconncomp(cleanImg);
grainStats = regionprops(cc, 'Area', 'Perimeter', 'Eccentricity', 'BoundingBox', 'MajorAxisLength', 'MinorAxisLength', 'Centroid');

% Display the original image and the processed image
figure;
subplot(1, 2, 1);
imshow(img);
title('Original Image');
subplot(1, 2, 2);
imshow(cleanImg);
title('Processed Image');
hold on;

% Initialize counters
totalGrains = cc.NumObjects;
impurities = 0;

% Analyze each grain and display size and shape information
for i = 1:length(grainStats)
    % Extract properties
    area = grainStats(i).Area;
    perimeter = grainStats(i).Perimeter;
    eccentricity = grainStats(i).Eccentricity;
    boundingBox = grainStats(i).BoundingBox;
    majorAxisLength = grainStats(i).MajorAxisLength;
    minorAxisLength = grainStats(i).MinorAxisLength;
    centroid = grainStats(i).Centroid;
    
    % Calculate the roundness (circularity) of the grain
    roundness = (4 * pi * area) / (perimeter ^ 2);
    
    % Criteria for impurities (e.g., too small, irregular shape, etc.)
    if area < 50 || roundness < 0.5 || eccentricity > 0.8
        impurities = impurities + 1;
    end
    
    % Display shape and size information on the image
    text(centroid(1), centroid(2), sprintf('Area: %.2f', area), 'Color', 'green', 'FontSize', 8);
    text(centroid(1), centroid(2) + 10, sprintf('Roundness: %.2f', roundness), 'Color', 'green', 'FontSize', 8);
    text(centroid(1), centroid(2) + 20, sprintf('Major Axis: %.2f', majorAxisLength), 'Color', 'green', 'FontSize', 8);
    text(centroid(1), centroid(2) + 30, sprintf('Minor Axis: %.2f', minorAxisLength), 'Color', 'green', 'FontSize', 8);
end

% Display results
fprintf('Total Grains: %d\n', totalGrains);
fprintf('Impurities: %d\n', impurities);
fprintf('Quality: %.2f%%\n', (1 - impurities / totalGrains) * 100);

hold off;

% Image Classification
% Load a pre-trained CNN model (AlexNet)
net = alexnet;

% Resize the image to match the input size of the network
imgResized = imresize(img, [227, 227]);

% Classify the image
label = classify(net, imgResized);

% Display the classification result
figure;
imshow(img);
title(['Classified as: ', char(label)]);

% Object Detection
% Load a pre-trained Faster R-CNN object detector
% Note: Replace 'faster_rcnn_resnet50_coco.mat' with the actual model file if available
detector = load('faster_rcnn_resnet50_coco.mat');

% Detect objects in the image
[bboxes, scores, labels] = detect(detector, img);

% Display the detection results
figure;
imshow(img);
hold on;
for i = 1:length(scores)
    if scores(i) > 0.5  % Threshold for displaying detections
        rectangle('Position', bboxes(i, :), 'EdgeColor', 'r', 'LineWidth', 2);
        text(bboxes(i, 1), bboxes(i, 2) - 10, sprintf('%s: %.2f', labels(i), scores(i)), 'Color', 'yellow', 'FontSize', 8);
    end
end
title('Object Detection');
hold off;

% Image Segmentation
% Load a pre-trained DeepLab v3+ network
net = deeplabv3plus;

% Segment the image
C = semanticseg(img, net);

% Display the segmentation result
B = labeloverlay(img, C);
figure;
imshow(B);
title('Image Segmentation');

% Feature Extraction
% Extract features from the image using AlexNet
features = activations(net, imgResized, 'fc7', 'OutputAs', 'rows');

% Display the extracted features
disp('Extracted Features:');
disp(features);
